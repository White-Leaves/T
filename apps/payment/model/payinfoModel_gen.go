// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	payinfoFieldNames          = builder.RawFieldNames(&Payinfo{})
	payinfoRows                = strings.Join(payinfoFieldNames, ",")
	payinfoRowsExpectAutoSet   = strings.Join(stringx.Remove(payinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	payinfoRowsWithPlaceHolder = strings.Join(stringx.Remove(payinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGomallPaymentPayinfoIdPrefix = "cache:gomallPayment:payinfo:id:"
	cacheGomallPaymentPayinfoSnPrefix = "cache:gomallPayment:payinfo:sn:"
)

type (
	payinfoModel interface {
		Insert(ctx context.Context, data *Payinfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Payinfo, error)
		FindOneBySn(ctx context.Context, sn string) (*Payinfo, error)
		Update(ctx context.Context, data *Payinfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPayinfoModel struct {
		sqlc.CachedConn
		table string
	}

	Payinfo struct {
		Id         int64     `db:"id"`          // 支付信息表id
		Sn         string    `db:"sn"`          // 流水单号
		Userid     int64     `db:"userid"`      // 用户id
		OrderSn    string    `db:"order_sn"`    // 业务单号
		Platform   int64     `db:"platform"`    // 支付平台:1-支付宝,2-微信
		PayTotal   float64   `db:"pay_total"`   // 支付总金额
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
		PayStatus  int64     `db:"pay_status"`  // 平台内交易状态   -1:支付失败 0:未支付 1:支付成功 2:已退款
		PayTime    time.Time `db:"pay_time"`    // 支付成功时间
	}
)

func newPayinfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPayinfoModel {
	return &defaultPayinfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`payinfo`",
	}
}

func (m *defaultPayinfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	gomallPaymentPayinfoIdKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoIdPrefix, id)
	gomallPaymentPayinfoSnKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gomallPaymentPayinfoIdKey, gomallPaymentPayinfoSnKey)
	return err
}

func (m *defaultPayinfoModel) FindOne(ctx context.Context, id int64) (*Payinfo, error) {
	gomallPaymentPayinfoIdKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoIdPrefix, id)
	var resp Payinfo
	err := m.QueryRowCtx(ctx, &resp, gomallPaymentPayinfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payinfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayinfoModel) FindOneBySn(ctx context.Context, sn string) (*Payinfo, error) {
	gomallPaymentPayinfoSnKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoSnPrefix, sn)
	var resp Payinfo
	err := m.QueryRowIndexCtx(ctx, &resp, gomallPaymentPayinfoSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `sn` = ? limit 1", payinfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sn); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPayinfoModel) Insert(ctx context.Context, data *Payinfo) (sql.Result, error) {
	gomallPaymentPayinfoIdKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoIdPrefix, data.Id)
	gomallPaymentPayinfoSnKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoSnPrefix, data.Sn)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, payinfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Sn, data.Userid, data.OrderSn, data.Platform, data.PayTotal, data.PayStatus, data.PayTime)
	}, gomallPaymentPayinfoIdKey, gomallPaymentPayinfoSnKey)
	return ret, err
}

func (m *defaultPayinfoModel) Update(ctx context.Context, newData *Payinfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	gomallPaymentPayinfoIdKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoIdPrefix, data.Id)
	gomallPaymentPayinfoSnKey := fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, payinfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Sn, newData.Userid, newData.OrderSn, newData.Platform, newData.PayTotal, newData.PayStatus, newData.PayTime, newData.Id)
	}, gomallPaymentPayinfoIdKey, gomallPaymentPayinfoSnKey)
	return err
}

func (m *defaultPayinfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGomallPaymentPayinfoIdPrefix, primary)
}

func (m *defaultPayinfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", payinfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPayinfoModel) tableName() string {
	return m.table
}
