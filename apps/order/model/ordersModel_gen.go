// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGomallOrderOrdersIdPrefix = "cache:gomallOrder:orders:id:"
	cacheGomallOrderOrdersSnPrefix = "cache:gomallOrder:orders:sn:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Orders, error)
		FindOneBySn(ctx context.Context, sn string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		Id          int64     `db:"id"`          // 订单id
		Sn          string    `db:"sn"`          // 订单号
		UserId      int64     `db:"user_id"`     // 用户id
		ProductId   int64     `db:"product_id"`  // 产品id
		Payment     float64   `db:"payment"`     // 实际付款金额,单位是元,保留两位小数
		Postage     float64   `db:"postage"`     // 运费
		Paymenttype int64     `db:"paymenttype"` // 支付类型,1-在线支付
		Status      int64     `db:"status"`      // 订单状态:0-已取消-10-未付款，20-已付款，30-待发货 40-待收货，50-交易成功，60-交易关闭
		CreateTime  time.Time `db:"create_time"` // 创建时间
		UpdateTime  time.Time `db:"update_time"` // 更新时间
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	gomallOrderOrdersIdKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersIdPrefix, id)
	gomallOrderOrdersSnKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, gomallOrderOrdersIdKey, gomallOrderOrdersSnKey)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id int64) (*Orders, error) {
	gomallOrderOrdersIdKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersIdPrefix, id)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, gomallOrderOrdersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneBySn(ctx context.Context, sn string) (*Orders, error) {
	gomallOrderOrdersSnKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersSnPrefix, sn)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, gomallOrderOrdersSnKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `sn` = ? limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sn); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	gomallOrderOrdersIdKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersIdPrefix, data.Id)
	gomallOrderOrdersSnKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersSnPrefix, data.Sn)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Sn, data.UserId, data.ProductId, data.Payment, data.Postage, data.Paymenttype, data.Status)
	}, gomallOrderOrdersIdKey, gomallOrderOrdersSnKey)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, newData *Orders) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	gomallOrderOrdersIdKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersIdPrefix, data.Id)
	gomallOrderOrdersSnKey := fmt.Sprintf("%s%v", cacheGomallOrderOrdersSnPrefix, data.Sn)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Sn, newData.UserId, newData.ProductId, newData.Payment, newData.Postage, newData.Paymenttype, newData.Status, newData.Id)
	}, gomallOrderOrdersIdKey, gomallOrderOrdersSnKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGomallOrderOrdersIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
