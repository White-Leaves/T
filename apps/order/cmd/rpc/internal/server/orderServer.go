// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"gomall/apps/order/cmd/rpc/internal/logic"
	"gomall/apps/order/cmd/rpc/internal/svc"
	"gomall/apps/order/cmd/rpc/pb"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) Orders(ctx context.Context, in *pb.OrdersReq) (*pb.OrdersResp, error) {
	l := logic.NewOrdersLogic(ctx, s.svcCtx)
	return l.Orders(in)
}

func (s *OrderServer) CreateOrder(ctx context.Context, in *pb.CreateOrderReq) (*pb.CreateOrderResp, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *OrderServer) CreateOrderCheck(ctx context.Context, in *pb.CreateOrderReq) (*pb.CreateOrderResp, error) {
	l := logic.NewCreateOrderCheckLogic(ctx, s.svcCtx)
	return l.CreateOrderCheck(in)
}

func (s *OrderServer) CreateOrderDTM(ctx context.Context, in *pb.AddOrderReq) (*pb.AddOrderResp, error) {
	l := logic.NewCreateOrderDTMLogic(ctx, s.svcCtx)
	return l.CreateOrderDTM(in)
}

func (s *OrderServer) CreateOrderDTMCancel(ctx context.Context, in *pb.AddOrderReq) (*pb.AddOrderResp, error) {
	l := logic.NewCreateOrderDTMCancelLogic(ctx, s.svcCtx)
	return l.CreateOrderDTMCancel(in)
}

func (s *OrderServer) GetOrderBySn(ctx context.Context, in *pb.GetOrderBySnReq) (*pb.GetOrderBySnResp, error) {
	l := logic.NewGetOrderBySnLogic(ctx, s.svcCtx)
	return l.GetOrderBySn(in)
}

func (s *OrderServer) RollbackOrder(ctx context.Context, in *pb.CreateOrderReq) (*pb.CreateOrderResp, error) {
	l := logic.NewRollbackOrderLogic(ctx, s.svcCtx)
	return l.RollbackOrder(in)
}
